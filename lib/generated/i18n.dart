import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get appName => "Tricks4Live";
  String get btnCancel => "Cancel";
  String get btnCollect => "Collect";
  String get btnFocus => "Focus";
  String get btnForgetPwd => "Forget Password";
  String get btnInValidate => "Invalidate";
  String get btnLogin => "Login";
  String get btnLoginOut => "Login Out";
  String get btnOK => "OK";
  String get btnReedit => "Re-Edit";
  String get btnRegister => "Register";
  String get btnRetry => "Retry";
  String get btnSend => "Send";
  String get btnToLogin => "To Login";
  String get btnValidate => "Validate";
  String get fieldEmail => "Email *";
  String get fieldEmailEmpty => "Email is required.";
  String get fieldEmailHelper => "Find back password, can not be changed.";
  String get fieldEmailHint => "Your email address";
  String get fieldEmailMatch => "Please enter correct email.";
  String get fieldNickName => "NickName *";
  String get fieldNickNameEmpty => "Nick name is required.";
  String get fieldNickNameHint => "What do people call you?";
  String get fieldPassword => "Password *";
  String get fieldPasswordEmpty => "Please enter a password.";
  String get fieldPasswordHelper => "No more than 16 characters.";
  String get fieldPasswordMatch => "The passwords don\\'t match.";
  String get fieldPasswordRepeat => "Re-type password";
  String get fieldPasswordTooShort => "Password is too short, the minimal length is 6.";
  String get fieldUserName => "UserName *";
  String get fieldUserNameEmpty => "User name is required.";
  String get fieldUserNameHint => "Accout name for login.";
  String get fieldUserNameMatch => "Please enter only alphabetical characters.";
  String get formErrorHint => "Please fix the errors in red before submitting.";
  String get formRequiredHint => "* indicates required field";
  String get hotComments => "Hot Comments";
  String get moreComments => "More Comments";
  String get navAbout => "About";
  String get navClickToLogin => "Click to login";
  String get navFeedback => "Feedback";
  String get navHome => "Home";
  String get navShare => "Share";
  String get noComments => "No Comments";
  String get operateSteps => "Operate Steps: ";
  String get pageLogin => "Login";
  String get pageRegister => "Register";
  String get pageSubjectDetail => "Subject Detail";
  String get pageUserInfo => "User Info";
  String get timeDaysLimit => " Months Ago";
  String get timeHoursLimit => " Hours Ago";
  String get timeMillisLimit => "Right Now";
  String get timeMinutesLimit => " Minutes Ago";
  String get timeSecondsLimit => " Seconds Ago";
  String get timeWeeksLimit => " Weeks Ago";
  String get userCollected => "My Collected";
  String get userCommented => "My Commented";
  String get userFocused => "My Focused";
  String get userImproved => "My Improved";
  String get userPublished => "My Published";
  String get userVerified => "My Verified";
  String get verifyEmailHint => "Your Email has not been verified. Send verify email now?";
  String get waitingForLoad => "Waiting for loading...";
  String loginWelcome(String nickName) => "$nickName, Welcome back.";
  String registerWelcome(String nickName) => "Register success, Welcome $nickName join us.";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
